
# proposals are unique per round
conjecture proposal(R,V1) & proposal(R,V2) -> V1 = V2

# configurations are unique per round
conjecture configure_round_msg(R,C1) & configure_round_msg(R,C2) -> C1 = C2

# properties of one_a
conjecture one_a(R,RP) -> ~le(R,RP)
conjecture one_a(R,RP) -> exists C. configure_round_msg(R,C)
#conjecture one_a(R,RP) & configure_round_msg(R,C) & complete_of(C,MINREL)-> le(MINREL,RP)

# only vote for proposed values
conjecture vote(N,R,V) -> proposal(R,V)

# master_complete or complete_of rounds are either zero or complete_msg holds for them
conjecture (R2 = master_complete | (configure_round_msg(R3,C) & complete_of(C,R2))) & ~le(R2,R1) -> complete_msg(R2)


# decisions come from configured rounds with  a quorum of votes:
conjecture forall R:round, V:value. (exists N:node. decision(N,R,V)) -> exists C:config, Q:quorum. configure_round_msg(R,C) & quorumin(Q,C) & (forall N:node. member(N, Q) -> vote(N,R,V))
# properties of configure_round messages
conjecture configure_round_msg(R,C) & complete_of(C,MINREL) -> le(MINREL,R) & le(MINREL, master_complete)


# properties of none
conjecture ~proposal(R,none)
conjecture ~vote(N,R,none)
conjecture ~decision(N,R,none)

# properties of left_rnd
conjecture join_ack_msg(N,R2,RP,V) & ~le(R2,R1) -> left_rnd(N,R1)

# properties of join_ack_msg
conjecture join_ack_msg(N,R,RP,V) -> one_a(R,RP)
conjecture join_ack_msg(N,R,RP,none) -> ~vote(N,RP,V)
conjecture join_ack_msg(N,R,RP,V) & V ~= none -> vote(N,RP,V)




# rounds in complete_msg have all prior rounds configured
conjecture (complete_msg(R2) & le(R1,R2) -> exists C. configure_round_msg(R1,C))
# only propose for rounds if all lower rounds so far are configured
 & (proposal(R2,V) & le(R1,R2) -> exists C. configure_round_msg(R1,C))

# properties of choosable and proposal
conjecture (forall R1:round, R2:round, V1:value, V2:value, Q:quorum, C:config.
    ~le(R2,R1) & proposal(R2,V2) & V1 ~= V2 & configure_round_msg(R1,C) & quorumin(Q,C) ->
    (exists N:node. member(N,Q) & left_rnd(N,R1) & ~vote(N,R1,V1)))
# complete, choosable, decision
  & (complete_msg(RR) & ~le(RR,R) & configure_round_msg(R,C) & quorumin(Q,C) &
           ~(exists N:node. member(N,Q) & left_rnd(N,R) & ~vote(N,R,V))
           -> (exists N:node. decision(N,RR,V)))
