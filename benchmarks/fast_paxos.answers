
# proposals are unique per round
conjecture proposal(R,V1) & proposal(R,V2) -> V1 = V2

# any messages are sent only in fast rounds
conjecture any_msg(R) -> fast(R)

# decisions come from quorums of votes:
conjecture ~fast(R) & (exists N. decision(N,R,V)) -> exists Q:c_quorum . forall N:node . c_member(N, Q) -> vote(N,R,V)
conjecture  fast(R) & (exists N. decision(N,R,V)) -> exists Q:f_quorum . forall N:node . f_member(N, Q) -> vote(N,R,V)

# only vote for proposed values in classic rounds
conjecture ~fast(R) & vote(N,R,V) -> proposal(R,V)

# votes in fast rounds
conjecture fast(R) & vote(N,R,V) -> (proposal(R,V) | any_msg(R))
conjecture ~(any_msg(R) & proposal(R,V))
conjecture fast(R) & vote(N,R,V1) & vote(N,R,V2) -> V1 = V2

# properties of one_b, left_rnd
#conjecture one_b_max_vote(N,R,RMAX,V) -> one_b(N,R)
conjecture one_b(N,R2) & ~le(R2,R1) -> left_rnd(N,R1)

# properties of none
conjecture ~vote(N,none,V)

# properties of choosable, proposal, any_msg (classic round)
conjecture forall R1:round, R2:round, V1:value, V2:value, Q:c_quorum.
    ~fast(R1) & ~le(R2,R1) & ((proposal(R2,V2) & V1 ~= V2) | any_msg(R2)) ->
    exists N:node. c_member(N,Q) & left_rnd(N,R1) & ~vote(N,R1,V1)
# properties of choosable, proposal, any_msg (fast round)
conjecture forall R1:round, R2:round, V1:value, V2:value, Q:f_quorum.
     fast(R1) & ~le(R2,R1) & ((proposal(R2,V2) & V1 ~= V2) | any_msg(R2)) ->
    exists N:node. f_member(N,Q) & left_rnd(N,R1) & ~vote(N,R1,V1)

# properties of one_b_max_vote
#conjecture one_b_max_vote(N,R2,none,V1) & ~le(R2,R1) -> ~vote(N,R1,V2)
#conjecture one_b_max_vote(N,R,RMAX,V) & RMAX ~= none -> ~le(R,RMAX) & vote(N,RMAX,V)
#conjecture one_b_max_vote(N,R,RMAX,V) & RMAX ~= none & ~le(R,ROTHER) & ~le(ROTHER,RMAX) -> ~vote(N,ROTHER,VOTHER)

